language:          cpp
dist:              trusty
git:
  submodules:      true

#
# Build Dependencies
#
before_script:
  # Test the build workflow slightly differenly from the README.md
  #
  # Let travis clone cryptopp-cmake
  # cd ..
  # git clone --branch CRYPTOPP_7_0_0 https://github.com/weidai11/cryptopp.git
  #
  # Copy cmake files to cryptopp then build
  - |
    cd ..
    git clone --branch CRYPTOPP_7_0_0 https://github.com/weidai11/cryptopp.git
    cp cryptopp-cmake/cryptopp-config.cmake cryptopp
    cp cryptopp-cmake/CMakeLists.txt cryptopp
    cd cryptopp

  #
  # Build Folder
  #
  - mkdir _build
  - cd _build

before_install:
  - eval "${MATRIX_EVAL}"
  - ${CXX} --version

matrix:
  include:

  #
  # XCode 9.4
  #
  - os: osx
    env:
      - TEST="XCode 9.4 - OS X 10.13"
    osx_image: xcode9.4
    script:
      - cmake ..
      - make
      - ctest --output-on-failure

  #
  # G++ default from Ubuntu Trusty
  #
  - os: linux
    env:
      - TEST="Ubuntu Trusty, g++ 4.8.4, cmake 2.8.12"
      - MATRIX_EVAL="CC=gcc && CXX=g++"

    script:
      - cmake -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++" ..
      - make
      - ctest --output-on-failure

  #
  # Clang default from Ubuntu Trusty
  #
  - os: linux
    env:
      - TEST="Ubuntu Trusty, clang++ 5, cmake 2.8.12"
      - MATRIX_EVAL="CC=clang && CXX=clang++"

    script:
      - cmake -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ ..
      - make
      - ctest --output-on-failure

  #
  # G++ with latest cmake
  #
  - os: linux
    env:
      - TEST="Ubuntu Trusty, g++ 4.8.4, cmake 3.11.4"
      - MATRIX_EVAL="CC=gcc && CXX=g++"

    before_script:
      #
      # Update / Install CMake
      #
      - |
        if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
          mkdir -p external/cmake
          pushd external/cmake
          wget https://cmake.org/files/v3.11/cmake-3.11.4-Linux-x86_64.sh
          chmod +x cmake-*-Linux-x86_64.sh
          ./cmake-*-Linux-x86_64.sh --exclude-subdir --skip-license
          export PATH="${PWD}/bin:$PATH"
          popd
        else
          brew update
          brew outdated cmake || brew upgrade cmake
        fi

      #
      # Test the build workflow slightly differenly from the README.md
      #
      # Let travis clone cryptopp-cmake
      # cd ..
      # Create a parent test project
      # git clone --branch CRYPTOPP_7_0_0 https://github.com/weidai11/cryptopp.git
      # Copy cmake files to cryptopp then build
      # Create cmake file for the test project on the fly
      # Build test project and cryptopp as a subdirectory
      #
      - |
        cd ..
        mkdir test
        cd test
        git clone --branch CRYPTOPP_7_0_0 https://github.com/weidai11/cryptopp.git
        cp ../cryptopp-cmake/cryptopp-config.cmake cryptopp
        cp ../cryptopp-cmake/CMakeLists.txt cryptopp

      #
      # Call it from a project that requires recent version of cmake
      #
      - |
        echo "cmake_minimum_required(VERSION 3.10)" > CMakeLists.txt
        echo "# This next line is the one that will trigger CMP0048 new behavior" >> CMakeLists.txt
        echo "project(abc VERSION 1.0.0)" >> CMakeLists.txt
        echo "add_subdirectory(cryptopp)" >> CMakeLists.txt

      #
      # Build Folder
      #
      - mkdir _build
      - cd _build

    script:
      - cmake -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++" ..
      - make
      - ctest --output-on-failure
